// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model program { 
  id               Int      @id @default(autoincrement()) @db.Integer
  code             String      @db.VarChar(64)
  title            String      @db.VarChar(256)
  short_title      String?     @db.VarChar(128)
  academic_year_id Int      
  created_at       DateTime    @default(now())
  modified_at      DateTime    @updatedAt
  deleted_at       DateTime?
  suite            String?     @db.VarChar(32)
   
  academic_year    academic_year  @relation(fields: [academic_year_id], references: [id])
  module_instances module_instance[]
  rules            rule[]
}

model academic_year {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String      @db.VarChar(8)
  from_date   DateTime?   
  end_date    DateTime?   
  created_at  DateTime    @default(now())
  modified_at DateTime    @updatedAt
  deleted_at  DateTime?

  programs           program[]
  module_instances   module_instance[]
  rules              rule[]
  @@map("academic_year")
}

model module {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar(64) @unique
  title       String   @db.VarChar(128)
  ects        Decimal?   @db.Decimal(4,2)
  cats        Decimal?   @db.Decimal(4,2)
  term        term? 
  created_at  DateTime   @default(now())
  modified_at DateTime   @default(now()) @updatedAt
  deleted_at  DateTime?

  module_instances module_instance[]
} 

enum term {
  SU
  SP
  AU
  SEPT
}

enum course_type {
  COMPULSORY
  ELECTIVE
  REQUIRED
}

model module_instance {
  id                Int     @id @default(autoincrement())
  module_id         Int   
  academic_year_id  Int   
  program_id        Int   
  type              course_type @default(COMPULSORY)
  created_at        DateTime    @default(now())
  modified_at       DateTime    @default(now()) @updatedAt
  deleted_at        DateTime?

  module        module          @relation(fields: [module_id], references: [id])
  academic_year academic_year   @relation(fields: [academic_year_id], references: [id])
  program       program         @relation(fields: [program_id], references: [id])

  mappings      module_group_mapping[]
  @@map("module_instance")
}

model rule {
  id                Int     @id @default(autoincrement())
  program_id        Int   
  module_group_id   Int  
  academic_year_id  Int 
  created_at        DateTime    @default(now())
  modified_at       DateTime    @default(now()) @updatedAt
  deleted_at        DateTime?

  academic_year academic_year   @relation(fields: [academic_year_id], references: [id])
  program       program         @relation(fields: [program_id], references: [id])
  module_group  module_group    @relation(fields: [module_group_id], references: [id])
}

model module_group {
    id                Int     @id @default(autoincrement())
    name             String   @db.VarChar(512)
    max_ects         Decimal?   @db.Decimal(4,2)
    min_ects         Decimal?   @db.Decimal(4,2)

    created_at       DateTime    @default(now())
    modified_at      DateTime    @default(now()) @updatedAt
    deleted_at       DateTime?   
    
    mappings         module_group_mapping[]
    rules            rule[]
}

model module_group_mapping {
    id                Int     @id @default(autoincrement())
    module_group_id     Int     
    module_instance_id  Int
    created_at        DateTime    @default(now())
    modified_at       DateTime    @default(now()) @updatedAt
    deleted_at        DateTime?   

    module_group      module_group     @relation(fields:[module_group_id], references: [id])
    module_instance   module_instance  @relation(fields:[module_instance_id], references: [id])
    @@unique([module_group_id, module_instance_id])
}


