// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model program { 
  id               Int      @id @default(autoincrement()) @db.Integer
  code             String      @db.VarChar(64)
  title            String      @db.VarChar(256)
  short_title      String?     @db.VarChar(128)
  academic_year_id Int      
  created_at       DateTime    @default(now())
  modified_at      DateTime    @updatedAt
  deleted_at       DateTime?
  suite            String?     @db.VarChar(32)
   
  academic_year    academic_year  @relation(fields: [academic_year_id], references: [id])
  module_instances module_instance[]
  rules            rule[]
  routes           route[]
  module_groups    module_group[]
  settings         setting[]
  students         student[]
}

model academic_year {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String      @db.VarChar(8)
  from_date   DateTime?   
  end_date    DateTime?   
  created_at  DateTime    @default(now())
  modified_at DateTime    @updatedAt
  deleted_at  DateTime?

  programs           program[]
  modules            module[]
  module_instances   module_instance[]
  rules              rule[]
  students           student[]
  module_selection_results  module_selection_result[]
  @@map("academic_year")
}

model module {
  id             Int      @id @default(autoincrement())
  code           String   @db.VarChar(64) @unique
  lecturer       String?   @db.VarChar(256)
  department     String?   @db.VarChar(32)
  employee_type  String?   @db.VarChar(32)
  subject_area   String?   @db.VarChar(32)
  lead_program   String?   @db.VarChar(32)
  eligible_cohorts String?  @db.VarChar(512)
  term           String?    
  role           String?   @db.VarChar(32)
  file_name      String?   @db.VarChar(512)
  title          String   @db.VarChar(256)
  brief_description  String?   @db.Text
  ects           Decimal?   @db.Decimal(4,2)
  cats           Decimal?   @db.Decimal(4,2)
  FHEQ_level     String?     @db.VarChar(8)
  delivery_mode  String?     @db.VarChar(32)
  learning_outcome String?   @db.Text 
  module_content   String?   @db.Text
  learn_teach_approach  String?  @db.Text
  assessment     String?     @db.Text
  reading_list   String?     @db.Text
  suite          String?   @db.VarChar(32)
  academic_year_id Int

  academic_year academic_year @relation(fields: [academic_year_id], references: [id])
       
  created_at     DateTime   @default(now())
  modified_at    DateTime   @default(now()) @updatedAt
  deleted_at     DateTime?

  module_instances module_instance[]
  module_group_mappings module_group_mapping[]
  module_selection_results  module_selection_result[]
} 

enum term {
  SU
  SP
  AU
  SEPT
  TBC
}

model module_instance {
  id                Int     @id @default(autoincrement())
  module_id         Int   
  academic_year_id  Int   
  program_id        Int   
  created_at        DateTime    @default(now())
  modified_at       DateTime    @default(now()) @updatedAt
  deleted_at        DateTime?

  module        module          @relation(fields: [module_id], references: [id])
  academic_year academic_year   @relation(fields: [academic_year_id], references: [id])
  program       program         @relation(fields: [program_id], references: [id])

  @@map("module_instance")
}

model rule {
  id                Int     @id @default(autoincrement())
  program_id        Int   
  module_group_id   Int  
  academic_year_id  Int 
  route_id          Int

  max_ects         Decimal?   @db.Decimal(4,2)
  min_ects         Decimal?   @db.Decimal(4,2)
  created_at        DateTime    @default(now())
  modified_at       DateTime    @default(now()) @updatedAt
  deleted_at        DateTime?

  academic_year academic_year   @relation(fields: [academic_year_id], references: [id])
  program       program         @relation(fields: [program_id], references: [id])
  module_group  module_group    @relation(fields: [module_group_id], references: [id])
  route         route           @relation(fields: [route_id], references: [id])
}

model module_group {
    id                Int     @id @default(autoincrement())
    name             String   @db.VarChar(512)
    program_id        Int  
    created_at       DateTime    @default(now())
    modified_at      DateTime    @default(now()) @updatedAt
    deleted_at       DateTime?   
    
    program          program    @relation(fields: [program_id], references: [id])
    mappings         module_group_mapping[]
    rules            rule[]
}

model module_group_mapping {
    id                Int     @id @default(autoincrement())
    module_group_id   Int     
    module_id         Int
    allow_sit_in      Boolean @default(false)
 
    created_at        DateTime    @default(now())
    modified_at       DateTime    @default(now()) @updatedAt
    deleted_at        DateTime?   

    module_group      module_group     @relation(fields:[module_group_id], references: [id])
    module            module           @relation(fields:[module_id], references: [id])
    @@unique([module_group_id, module_id])
}

model route {
  id          Int   @id @default(autoincrement())
  name        String  @db.VarChar(128)
  program_id  Int
  created_at        DateTime    @default(now())
  modified_at       DateTime    @default(now()) @updatedAt
  deleted_at        DateTime?   

  program    program   @relation(fields:[program_id], references: [id])
  rules      rule[]
  module_selection_results  module_selection_result[]
}

model setting {
  id           Int   @id @default(autoincrement())
  program_id   Int  
  key          String  
  value        String

  created_at   DateTime    @default(now())
  modified_at  DateTime    @default(now()) @updatedAt
  deleted_at   DateTime?  

  program      program  @relation(fields: [program_id], references: [id])

  @@unique([program_id, key])
}

model student {
  id                Int             @id @default(autoincrement())
  email             String
  user_name         String
  surname           String?      
  given_name        String
  cid               Int
  program_id        Int
  academic_year_id  Int    
  selection_status  ModuleSelectionStatus   @default(NOT_STARTED)

  created_at       DateTime        @default(now())
  modified_at      DateTime        @default(now()) @updatedAt
  deleted_at       DateTime?

  academic_year    academic_year   @relation(fields: [academic_year_id], references: [id])
  program          program       @relation(fields: [program_id], references: [id])

  module_selection_results   module_selection_result[]
}

model admin {
  id       Int   @id @default(autoincrement())
  email    String
  user_name String
  access_level     AccessLevel     @default(STANDARD)

  created_at       DateTime        @default(now())
  modified_at      DateTime        @default(now()) @updatedAt
  deleted_at       DateTime?
}

enum AccessLevel {
  SUPER
  STANDARD 
}

enum RegisterLevel {
  SITIN
  CREDIT
}

enum ModuleSelectionStatus {
  COMPLETE
  IN_PROGRESS
  NOT_STARTED
}

model module_selection_result {
  id                Int   @id @default(autoincrement())
  student_id        Int  
  route_id          Int
  module_id         Int
  academic_year_id  Int
  type             RegisterLevel
  
  created_at       DateTime        @default(now())
  modified_at      DateTime        @default(now()) @updatedAt
  deleted_at       DateTime?

  academic_year academic_year   @relation(fields: [academic_year_id], references: [id])
  route         route           @relation(fields: [route_id], references: [id])
  student       student         @relation(fields: [student_id], references: [id])
  module        module          @relation(fields: [module_id], references: [id])

}



